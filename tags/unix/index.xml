<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>./sigterm.sh</title>
    <link>https://sigterm.sh/tags/unix/index.xml</link>
    <description>Recent content on ./sigterm.sh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Gregory Armer. All rights reserved.</copyright>
    <atom:link href="https://sigterm.sh/tags/unix/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Blocking web traffic behind an Elastic Load Balancer (ELB)</title>
      <link>https://sigterm.sh/2012/09/28/blocking-web-traffic-behind-an-elastic-load-balancer-elb</link>
      <pubDate>Fri, 28 Sep 2012 12:00:00 -0400</pubDate>
      
      <guid>https://sigterm.sh/2012/09/28/blocking-web-traffic-behind-an-elastic-load-balancer-elb</guid>
      <description>&lt;p&gt;Over the past few hours we&amp;rsquo;ve been on the receiving end of a fairly large scale set of web requests (read: attack) to a website we host over on Amazon EC2. Our setup is not really that complicated, however we encountered a problem that wasn&amp;rsquo;t that easy to solve.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;our-setup&#34;&gt;Our Setup&lt;/h4&gt;

&lt;p&gt;So we have an &lt;a href=&#34;http://aws.amazon.com/elasticloadbalancing/&#34; title=&#34;Elastic Load Balancer&#34;&gt;Elastic Load Balancer&lt;/a&gt; out in front, that sends on web requests to a set of web servers. These web servers are in an auto-scaling group and simply run &lt;a href=&#34;http://nginx.org/en/&#34; title=&#34;nginx&#34;&gt;nginx&lt;/a&gt;. They then pass traffic onto a set of load balanced application servers. Nothing really out of the ordinary here.&lt;/p&gt;

&lt;p&gt;The entire setup lives inside a &lt;a href=&#34;http://aws.amazon.com/vpc/&#34; title=&#34;VPC&#34;&gt;VPC&lt;/a&gt; so these server have no direct access to the internet, and specific traffic is NAT&amp;rsquo;d out another gateway.&lt;/p&gt;

&lt;h4 id=&#34;the-problem&#34;&gt;The Problem&lt;/h4&gt;

&lt;p&gt;We narrowed down the attack to a set of IPs all originating from the same netblock. These requests were largely made up of SQL injection attacks, along with some other crazy requests.&lt;/p&gt;

&lt;p&gt;The requests looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;208.96.18.11 &amp;quot;GET /results/2011%27%20OR%20%271%27%3D%271/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
208.96.18.11 &amp;quot;GET /results/2011)%20OR%201%3D(1/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
208.96.18.11 &amp;quot;GET /results/2011%27)%20OR%20%271%27%3D(%271/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
208.96.18.11 &amp;quot;GET /results/2011%27%20OR%201%3D1%20%23/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
208.96.18.11 &amp;quot;GET /results/2011%27)%20AND%20%271%27%20in%20(%270/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and without the URL encoding:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;208.96.18.11 &amp;quot;GET /results/2011&#39; OR &#39;1&#39;=&#39;1/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
208.96.18.11 &amp;quot;GET /results/2011) OR 1=(1/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
208.96.18.11 &amp;quot;GET /results/2011&#39;) OR &#39;1&#39;=(&#39;1/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
208.96.18.11 &amp;quot;GET /results/2011&#39; OR 1=1 #/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
208.96.18.11 &amp;quot;GET /results/2011&#39;) AND &#39;1&#39; in (&#39;0/11/ HTTP/1.1&amp;quot; &amp;quot;Mozilla/5.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Yes, that&amp;rsquo;s one of the actual IPs attacking us.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the obvious move here is to block traffic from the offending IPs, right ?&lt;/p&gt;

&lt;p&gt;Unfortunately that&amp;rsquo;s simply not possible with an ELB, as the only control you have over the traffic is through a &lt;a href=&#34;http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/using-network-security.html&#34; title=&#34;Security Groups&#34;&gt;security group&lt;/a&gt;. However, the security group only lets you control &lt;em&gt;allow&lt;/em&gt; rules, so to block a specific IP you&amp;rsquo;d need to explicitly allow traffic from all other IPs on the internet. This is simply not feasible.&lt;/p&gt;

&lt;p&gt;You can&amp;rsquo;t block the traffic with a firewall on the web servers either, as the traffic hitting the web servers has the source IP address of the load balancer. The only access you have to the real source IP at the web server level is in the X-Forwarded-For HTTP header inside that actual requests.&lt;/p&gt;

&lt;h4 id=&#34;blocking-the-traffic&#34;&gt;Blocking the Traffic&lt;/h4&gt;

&lt;p&gt;The best you can do in this scenario is to block all requests at the actual web servers. In our case on nginx this was as simple as adding the following directives to the &lt;em&gt;server&lt;/em&gt; block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set_real_ip_from 172.16.10.9;         // Our ELB
real_ip_header X-Forwarded-For;       // The real IP from the ELB
deny 208.96.18.11;                    // Have some HTTP 403
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This doesn&amp;rsquo;t stop the traffic at all, it simply returns HTTP 403&amp;rsquo;s to any requests from the IP addresses or netblock listed. This does take the load off the application servers though, and since nginx is quite efficient at returning 403&amp;rsquo;s with little resource usage, we can serve them up nice and quickly. It would still be nice to firewall that traffic entirely, and hopefully, someday, Amazon adds the ability to configure &lt;em&gt;allow&lt;/em&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;em&gt;deny&lt;/em&gt; rules in security groups.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using ferm to build firewall rulesets</title>
      <link>https://sigterm.sh/2010/12/31/using-ferm-to-build-firewall-rulesets</link>
      <pubDate>Fri, 31 Dec 2010 12:00:00 -0400</pubDate>
      
      <guid>https://sigterm.sh/2010/12/31/using-ferm-to-build-firewall-rulesets</guid>
      <description>&lt;p&gt;This post is thanks to a suggestion from &lt;a href=&#34;http://twitter.com/froztbyte&#34;&gt;JP Viljoen&lt;/a&gt; to check out &lt;a href=&#34;http://ferm.foo-projects.org/&#34;&gt;ferm&lt;/a&gt;. Well, I did, and it&amp;rsquo;s fairly neat. You get to express your firewall configuration in structures resembling simple C code along with using things like arrays, functions and if / else constructs which makes building complex rulesets quite a simple task.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve included an example configuration below of one of my machines. The network configuration is not extremely complex, but there is a mix of IPv4, IPv6 and - as this is an IRC server - some DNAT to make the IRC service available on a number of other privileged ports without having the service actually listen on those ports. This particular server is running Debian however ferm is basically just a front to ip(6)tables so it&amp;rsquo;ll run pretty much anywhere that runs.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;First off, here is my network interface configuration to give you an idea of what is where:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;kore:~# cat /etc/network/interfaces

auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address 173.134.21.19             # Static eth0 IP
    netmask 255.255.255.0
    gateway 173.134.21.1

iface eth0 inet6 static
    address 2001:410:1e9b:ba22::2     # Primary HE.net IPv6 /64 address
    netmask 64

auto eth0:0
iface eth0:0 inet static
    address 192.168.49.97             # Local networking
    netmask 255.255.128.0

auto he-ipv6
iface he-ipv6 inet6 v4tunnel
    address 2001:410:1e9a:ba22::2     # Tunnel address
    netmask 64
    ttl 255
    gateway 2001:410:1e9a:ba22::1
    endpoint 216.218.224.42
    local 173.134.21.19
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is nothing extremely complicated here, just a basic IPv4 static IP assigned by my provider, a local network for traffic between this and other local nodes, a &lt;a href=&#34;http://tunnelbroker.net/&#34;&gt;Hurricane Electric IPv6 tunnel&lt;/a&gt; and a static IP from my HE.net provided /64.&lt;/p&gt;

&lt;p&gt;The ferm configuration in use here looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;kore:~# cat /etc/ferm/ferm.conf
# -*- shell-script -*-
#
#  Configuration file &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; ferm&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;.
#

@def $PORTS = (22 25 161 4949 6667 6668 7000 7352 7535); # Services running
@def $IRC_PORTS = (21 23 53 80 110 143 993);             # Additional ports

table filter {
    chain INPUT {
        policy DROP;

        # connection tracking
        mod state state INVALID DROP;
        mod state state (ESTABLISHED RELATED) ACCEPT;

        # allow &lt;span style=&#34;color: #f8f8f2&#34;&gt;local&lt;/span&gt; packages
        interface lo ACCEPT;

        # respond to ping
        proto icmp ACCEPT;

        # standard ports we allow from the outside
        proto tcp dport $PORTS ACCEPT;
    }

    chain OUTPUT {
        policy ACCEPT;

        # connection tracking
        #mod state state INVALID DROP&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        mod state state (ESTABLISHED RELATED) ACCEPT;
    }

    chain FORWARD {
        policy DROP;

        # connection tracking
        mod state state INVALID DROP;
        mod state state (ESTABLISHED RELATED) ACCEPT;
    }
}

table nat {
    chain PREROUTING {
        # additional ports we listen on and redirect to the IRC server
        interface eth0 proto tcp dport $IRC_PORTS DNAT to 173.134.21.19:6667;
    }
}

# IPv6:
domain ip6 table filter {
    chain INPUT {
        policy DROP;

        # connection tracking
        mod state state INVALID DROP;
        mod state state (ESTABLISHED RELATED) ACCEPT;

        # allow ICMP &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; neighbor solicitation, like ARP &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; IPv4&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
        proto ipv6-icmp ACCEPT;

        # standard ports we allow from the outside
        proto tcp dport $PORTS ACCEPT;
    }

    chain OUTPUT {
        policy ACCEPT;

        # connection tracking
        #mod state state INVALID DROP&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        mod state state (ESTABLISHED RELATED) ACCEPT;
    }

    chain FORWARD {
        policy DROP;

        # connection tracking
        mod state state INVALID DROP;
        mod state state (ESTABLISHED RELATED) ACCEPT;
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So this ruleset is basically broken down into 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IPv4 filter table&lt;/li&gt;
&lt;li&gt;IPv4 nat table&lt;/li&gt;
&lt;li&gt;IPv6 filter table&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ipv4-filter-table&#34;&gt;IPv4 filter table&lt;/h4&gt;

&lt;p&gt;We control the INPUT, OUTPUT and FORWARD chains here. On the INPUT chain, we default to dropping everything, enable connection state tracking, allow all traffic through our local interface, allow ICMP and specify a list of ports we allow the outside world to use. On the OUTPUT chain we allow everything out and enable connection state tracking. Finally on the FORWARD chain we drop everything as this machine is not a router. Pretty concise right ?&lt;/p&gt;

&lt;h4 id=&#34;ipv4-nat-table&#34;&gt;IPv4 nat table&lt;/h4&gt;

&lt;p&gt;In the nat table config, we basically setup the DNAT of those privileged ports under the PREROUTING chain.&lt;/p&gt;

&lt;h4 id=&#34;ipv6-filter-table&#34;&gt;IPv6 filter table&lt;/h4&gt;

&lt;p&gt;Finally, in the IPv6 filter table, we allow the same set of incoming ports as IPv4, allow ipv6-icmp and setup connection state tracking as before.&lt;/p&gt;

&lt;p&gt;Once that&amp;rsquo;s done, simply run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;kore:~# ferm /etc/ferm/ferm.conf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;hellip; and your new ruleset is validated and loaded.&lt;/p&gt;

&lt;p&gt;On a side note, if you are interested in playing around with IPv6 I would highly recommend setting up a Hurricane Electric tunnel and then doing the &lt;a href=&#34;http://ipv6.he.net/certification/&#34;&gt;certification&lt;/a&gt;. It makes for a great Saturday afternoon time waster and you might learn something along the way:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ipv6.he.net/certification/&#34;&gt;&lt;img src=&#34;http://ipv6.he.net/certification/create_badge.php?pass_name=gregarmer&amp;badge=1&#34; alt=&#34;IPv6 Certification&#34; width=&#34;150&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Git man pages on OS X</title>
      <link>https://sigterm.sh/2010/04/15/getting-git-manpages-on-os-x</link>
      <pubDate>Thu, 15 Apr 2010 12:00:00 -0400</pubDate>
      
      <guid>https://sigterm.sh/2010/04/15/getting-git-manpages-on-os-x</guid>
      <description>&lt;p&gt;For some reason the OS X install of Git doesn&amp;rsquo;t include the manpages. Here is how I installed them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;First off, find the appropriate manpath.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;greg@codemine:~ %&amp;gt; cat /etc/manpaths
/usr/share/man
/usr/local/share/man
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;/usr/local/share/man looks good&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;greg@codemine:~ %&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VER&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;git --version &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{print $3}&amp;#39;`&lt;/span&gt;
greg@codemine:~ %&amp;gt; curl -O http://www.kernel.org/pub/software/scm/git/git-manpages-&lt;span style=&#34;color: #f8f8f2&#34;&gt;$VER&lt;/span&gt;.tar.bz2
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  242k  100  242k    0     0  92051      0  0:00:02  0:00:02 --:--:--   99k
greg@codemine:~ %&amp;gt; sudo tar xjv -C /usr/local/share/man -f git-manpages-&lt;span style=&#34;color: #f8f8f2&#34;&gt;$VER&lt;/span&gt;.tar.bz2
Password:
x ./
x ./man1/
x ./man1/git-add.1
[snip]
x ./man7/gitworkflows.7
greg@codemine:~ %&amp;gt; rm git-manpages-&lt;span style=&#34;color: #f8f8f2&#34;&gt;$VER&lt;/span&gt;.tar.bz2
greg@codemine:~ %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;ldquo;man git-add&amp;rdquo; should now work fine.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using an alternative mirror for FreeBSD port retrieval</title>
      <link>https://sigterm.sh/2009/10/12/using-an-alternative-mirror-for-freebsd-port-retrieval</link>
      <pubDate>Mon, 12 Oct 2009 16:00:00 -0400</pubDate>
      
      <guid>https://sigterm.sh/2009/10/12/using-an-alternative-mirror-for-freebsd-port-retrieval</guid>
      <description>&lt;p&gt;This is something I always search for which doesn&amp;rsquo;t seem to be very clear from the initial results. The mirrors included below are South Africa specific, so if you are not in South Africa then replace the hostname with something more appropriate for your location.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Add these to &lt;strong&gt;/etc/make.conf&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;MASTER_SITE_BACKUP?=    \
    ftp://ftp.za.freebsd.org/pub/FreeBSD/ports/distfiles/${DIST_SUBDIR}/

MASTER_SITE_OVERRIDE?=  ${MASTER_SITE_BACKUP}
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;mirrors&#34;&gt;Mirrors&lt;/h4&gt;

&lt;table class=&#34;table table-condensed&#34; cellpadding=&#34;1&#34; cellspacing=&#34;1&#34; border=&#34;0&#34;&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;strong&gt;Network&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;Hostname&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;Alias&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;IPv4&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;IPv6&lt;/strong&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Tenet&lt;/td&gt;
    &lt;td&gt;ftp.za.freebsd.org&lt;/td&gt;
    &lt;td&gt;freebsd.mirror.ac.za&lt;/td&gt;
    &lt;td&gt;155.232.191.209&lt;/td&gt;
    &lt;td&gt;-&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;CSIR&lt;/td&gt;
    &lt;td&gt;ftp2.za.freebsd.org&lt;/td&gt;
    &lt;td&gt;-&lt;/td&gt;
    &lt;td&gt;146.64.8.4&lt;/td&gt;
    &lt;td&gt;2001:4200:7000:1::4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;MTN&lt;/td&gt;
    &lt;td&gt;ftp3.za.freebsd.org&lt;/td&gt;
    &lt;td&gt;-&lt;/td&gt;
    &lt;td&gt;196.30.227.198&lt;/td&gt;
    &lt;td&gt;-&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;IS&lt;/td&gt;
    &lt;td&gt;ftp4.za.freebsd.org&lt;/td&gt;
    &lt;td&gt;ftp.is.co.za&lt;/td&gt;
    &lt;td&gt;196.4.160.12&lt;/td&gt;
    &lt;td&gt;-&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;See &lt;a href=&#34;http://crnl.org/blog/2008/11/02/freebsd-local-ports-distfile-downloads-for-south-africans&#34;&gt;this post&lt;/a&gt; for a far more detailed set of MASTER_SITE make variables. This references a lot more of the locally mirrored content.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using a ZFS filesystem with Time Machine</title>
      <link>https://sigterm.sh/2009/10/04/using-a-zfs-filesystem-with-time-machine</link>
      <pubDate>Sun, 04 Oct 2009 12:00:00 -0400</pubDate>
      
      <guid>https://sigterm.sh/2009/10/04/using-a-zfs-filesystem-with-time-machine</guid>
      <description>&lt;p&gt;This simple how-to explains how to get your Time Machine backups working with a ZFS filesystem. This allows you to use the features of ZFS filesystems for your Time Machine backups.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note this is for Mac OS X - Snow Leopard.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;1)    Enable unsupported network volumes on your Mac by opening a Terminal and pasting this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;greg@macbook:~ %&amp;gt; defaults write com.apple.systempreferences TMShowUnsupportedNetworkVolumes 1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2)    Create a new ZFS filesystem and enable CIFS access to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;greg@opensolaris:~ %&amp;gt; zfs create tank/userbackups
greg@opensolaris:~ %&amp;gt; zfs &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sharesmb&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;on tank/userbackups
greg@opensolaris:~ %&amp;gt; zfs &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sharesmb&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;userbackups tank/userbackups
greg@opensolaris:~ %&amp;gt; zfs &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;aclmode&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;passthrough tank/userbackups
greg@opensolaris:~ %&amp;gt; zfs &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;aclinherit&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;passthrough tank/userbackups
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will probably want to setup the correct permissions on your new share, more details in &lt;a href=&#34;http://code.geek.sh/2009/07/the-basics-of-zfs-acls/&#34;&gt;[this post]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3)    Make sure you can mount this share and write to it from your Mac.&lt;/p&gt;

&lt;p&gt;4)    Create the correct disk image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;greg@macbook:~ %&amp;gt; /bin/bash
greg@macbook:~ %&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /Volumes/userbackups
greg@macbook:~ %&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SYSNAME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;scutil --get ComputerName&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;
greg@macbook:~ %&amp;gt; hdiutil create -size 600G -fs HFS+J &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
&amp;gt; -volname &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Time Machine Backups&amp;#39;&lt;/span&gt; -type SPARSEBUNDLE &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SYSNAME&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}.sparsebundle&amp;quot;&lt;/span&gt;
greg@macbook:~ %&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UUID&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;system_profiler &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Hardware UUID&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{print $3}&amp;#39;`&lt;/span&gt;
greg@macbook:~ %&amp;gt; cat &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; &amp;quot;${SYSNAME}.sparsebundle&amp;quot;/com.apple.TimeMachine.MachineID.plist&lt;/span&gt;
&amp;gt;&lt;span style=&#34;color: #e6db74&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&amp;gt;&lt;span style=&#34;color: #e6db74&#34;&gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&amp;gt;&lt;span style=&#34;color: #e6db74&#34;&gt; &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;&lt;/span&gt;
&amp;gt;&lt;span style=&#34;color: #e6db74&#34;&gt; &amp;lt;dict&amp;gt;&lt;/span&gt;
&amp;gt;&lt;span style=&#34;color: #e6db74&#34;&gt;         &amp;lt;key&amp;gt;com.apple.backupd.HostUUID&amp;lt;/key&amp;gt;&lt;/span&gt;
&amp;gt;&lt;span style=&#34;color: #e6db74&#34;&gt;         &amp;lt;string&amp;gt;$UUID&amp;lt;/string&amp;gt;&lt;/span&gt;
&amp;gt;&lt;span style=&#34;color: #e6db74&#34;&gt; &amp;lt;/dict&amp;gt;&lt;/span&gt;
&amp;gt;&lt;span style=&#34;color: #e6db74&#34;&gt; &amp;lt;/plist&amp;gt;&lt;/span&gt;
&amp;gt;&lt;span style=&#34;color: #e6db74&#34;&gt; EOF&lt;/span&gt;
greg@macbook:~ %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5)    and finally, open up Time Machine. You should now see your network share as an option. Choose it, configure any excludes you want and kick off your first backup!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll post a little later on restoring these backups using one of these methods:&lt;/p&gt;

&lt;ul style=&#34;padding-left: 30px;&#34;&gt;
    &lt;li&gt;Restore from Time Machine by using the boot disk&lt;/li&gt;
    &lt;li&gt;or by doing a standard install then using the Migration Assistant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick Solaris zone stats</title>
      <link>https://sigterm.sh/2009/08/13/quick-solaris-zone-stats</link>
      <pubDate>Thu, 13 Aug 2009 12:00:00 -0400</pubDate>
      
      <guid>https://sigterm.sh/2009/08/13/quick-solaris-zone-stats</guid>
      <description>&lt;p&gt;Add this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;alias zonestat=&amp;quot;prstat -vZ 1 1 | grep -A50 &#39;^ZONEID&#39;&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to your ~/.profile and you should see something like this when running it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;root@tank:~# zonestat
ZONEID    NPROC  SWAP   RSS MEMORY      TIME  CPU ZONE
     0       58 1198M 1206M    30%  16:15:40 1.7% global
     6       25  172M  175M   4.4%   0:03:14 0.0% cl-build
     2       27   48M   31M   0.8%   0:00:47 0.0% mirror
Total: 110 processes, 534 lwps, load averages: 0.09, 0.08, 0.07
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The basics of ZFS ACLs</title>
      <link>https://sigterm.sh/2009/07/31/the-basics-of-zfs-acls</link>
      <pubDate>Fri, 31 Jul 2009 12:00:00 -0400</pubDate>
      
      <guid>https://sigterm.sh/2009/07/31/the-basics-of-zfs-acls</guid>
      <description>&lt;p&gt;This post was mostly inspired by reading &lt;a href=&#34;http://www.1stbyte.com/2009/07/24/zfs-cifs-and-acl-inheritance/&#34;&gt;this post&lt;/a&gt; in trying to get my head around the ZFS ACL and permission system.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Basically I have a pool set out as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;tank
tank/media
tank/zones
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;tank/media is served via CIFS and NFS to multiple clients on my network, each with their own unix account on the OpenSolaris server. tank/zones is used for extra zones running on the host.&lt;/p&gt;

&lt;p&gt;Everything was working great until I found that files and directories created by clients ended up looking like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;----------  1 greg staff 734310400 2009-07-18 19:10 foo.txt
d---------  2 greg staff        19 2008-12-06 14:10 Bar
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This sure didn&amp;rsquo;t go down well when other users needed to access those files or directories.&lt;/p&gt;

&lt;p&gt;So in following the above mentioned post I did this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;# zfs &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;aclinherit&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;passthrough tank/media
# zfs &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;aclmode&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;passthrough tank/media
# /bin/chmod &lt;span style=&#34;color: #ae81ff&#34;&gt;0774&lt;/span&gt; /tank/media
# /bin/chmod -R A- /tank/media
# /bin/chmod -R &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;owner@:full_set:fd:allow /tank/media
# /bin/chmod -R A+group@:full_set:fd:allow /tank/media
# /bin/chmod -R A+everyone@:read_set:fd:allow /tank/media
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A better description of what the flags / syntax mean can be found &lt;a href=&#34;http://dlc.sun.com/osol/docs/content/ZFSADMIN/gbace.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://dlc.sun.com/osol/docs/content/ZFSADMIN/gbacb.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A simple breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First off, we tell ZFS that all files or directories must inherit all acls / permissions from their parent.&lt;/li&gt;
&lt;li&gt;We use /bin/chmod as the chmod in the default path is the GNU chmod which does not understand ZFS acls.&lt;/li&gt;
&lt;li&gt;The second chmod &amp;ldquo;A-&amp;rdquo; will remove all acls currently set on the object.&lt;/li&gt;
&lt;li&gt;We then set the owners permission to the &amp;ldquo;full_set&amp;rdquo;, thus giving the owner all possible permissions.&lt;/li&gt;
&lt;li&gt;We do the same for the group.&lt;/li&gt;
&lt;li&gt;Finally, we give everyone else read access.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Run something as another user</title>
      <link>https://sigterm.sh/2009/07/08/run-something-as-another-user</link>
      <pubDate>Wed, 08 Jul 2009 13:00:00 -0400</pubDate>
      
      <guid>https://sigterm.sh/2009/07/08/run-something-as-another-user</guid>
      <description>&lt;p&gt;Here is a simple way to run something on UNIX / Linux as another user, without having to resort to weird sudo incantations. The Makefile is left as an exercise for the reader.&lt;/p&gt;

&lt;p&gt;This has only been tested on FreeBSD, Debian Linux and OpenSolaris so far.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Compile with: &lt;code&gt;cc -o setuid setuid.c&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;pwd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;grp.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;/* Check command line */&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Usage: %s user cmd&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;passwd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pw;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;pw&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getpwnam(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(pw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;User not found&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(initgroups(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pw_gid)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;perror(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;initgroups&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(setregid(pw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pw_gid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pw_gid)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;setreuid(pw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pw_uid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pw_uid)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;execvp(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;perror(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;perror(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;setre[gu]id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>