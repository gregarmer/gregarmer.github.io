<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>./sigterm.sh</title>
    <link>https://gregarmer.github.io/tags/golang/index.xml</link>
    <description>Recent content on ./sigterm.sh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Gregory Armer. All rights reserved.</copyright>
    <atom:link href="https://gregarmer.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Recording backend processing time in Golang</title>
      <link>https://gregarmer.github.io/2015/03/08/recording-backend-processing-time-in-go</link>
      <pubDate>Sun, 08 Mar 2015 18:58:00 -0400</pubDate>
      
      <guid>https://gregarmer.github.io/2015/03/08/recording-backend-processing-time-in-go</guid>
      <description>&lt;p&gt;I recently wrote a RESTful web service in Golang, and wanted to pull out some stats on how my handlers were doing in terms of performance.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;A simplified version of where I started would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;github.com/gorilla/mux&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
)

// Some handlers here

func main() {
	router := mux.NewRouter().StrictSlash(true)
	router.HandleFunc(&amp;quot;/api/something&amp;quot;, SomethingIndexHandler).Methods(&amp;quot;GET&amp;quot;)
	router.HandleFunc(&amp;quot;/api/something&amp;quot;, SomethingCreateHandler).Methods(&amp;quot;POST&amp;quot;)

	port := &amp;quot;:9000&amp;quot;
	log.Printf(&amp;quot;Starting web server on &amp;quot; + port)
	err := http.ListenAndServe(port, router)
	if err != nil {
		log.Fatal(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is actually pretty simple, we just need something to wrap all our routes, and emit logs containing start and end times. That would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func DefaultWrapper(handler http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		handler.ServeHTTP(w, r)
		log.Printf(&amp;quot;%s %s %s %s&amp;quot;, r.RemoteAddr, time.Since(start), r.Method, r.URL)
	})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You would then wrap your router with this wrapper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;err := http.ListenAndServe(port, DefaultWrapper(router))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We would then see logs like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go-app git:master ❯ go run *.go
2015/03/08 17:34:55 Starting web server on :9000
2015/03/08 17:34:57 [::1]:49868 824µs GET /api/something?limit=10
2015/03/08 17:34:58 [::1]:49868 7.954824ms POST /api/something
2015/03/08 17:34:59 [::1]:49868 34.745µs GET /
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;final-code&#34;&gt;Final code&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package main
 
import (  
   &amp;quot;fmt&amp;quot;
   &amp;quot;github.com/gorilla/mux&amp;quot;
   &amp;quot;log&amp;quot;
   &amp;quot;net/http&amp;quot;
   &amp;quot;time&amp;quot;
)
 
// Some handlers here
 
func DefaultWrapper(handler http.Handler) http.Handler {  
   return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
      start := time.Now()
      handler.ServeHTTP(w, r)
      log.Printf(&amp;quot;%s %s %s %s&amp;quot;, r.RemoteAddr, time.Since(start), r.Method, r.URL)
   })
}
 
func main() {  
   router := mux.NewRouter().StrictSlash(true)
   router.HandleFunc(&amp;quot;/api/something&amp;quot;, SomethingIndexHandler).Methods(&amp;quot;GET&amp;quot;)
   router.HandleFunc(&amp;quot;/api/something&amp;quot;, SomethingCreateHandler).Methods(&amp;quot;POST&amp;quot;)
 
   port := &amp;quot;:9000&amp;quot;
   log.Printf(&amp;quot;Starting web server on &amp;quot; + port)
   err := http.ListenAndServe(port, DefaultWrapper(router))
   if err != nil {
      log.Fatal(err)
   }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>